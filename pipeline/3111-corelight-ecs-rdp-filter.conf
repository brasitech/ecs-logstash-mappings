# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and [@metadata][z_no_reuse][event_sub_type] == "rdp" {

    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "various"
        "[event][category]" => "network"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CORELIGHT_INDEX_NAME_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CORELIGHT_INDEX_DATASET_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CORELIGHT_INDEX_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "auth_success" => "[rdp][auth_successful]"
        "cert_count" => "[rdp][certificate][count]"
        "cert_permanent" => "[rdp][certificate][permanent]"
        "cert_type" => "[rdp][certificate][type]"
        "channels_joined" => "[rdp][channels_joined]"
        "client_build" => "[rdp][source][build]"
        "client_channels" => "[rdp][client_channels]"
        "client_dig_product_id" => "[rdp][client][dig_product_id]"
        "client_name" => "[rdp][source][name]"
        "cookie" => "[rdp][cookie]"
        "desktop_height" => "[rdp][desktop_height]"
        "desktop_width" => "[rdp][desktop_width]"
        "encryption_level" => "[rdp][encryption_level]"
        "encryption_method" => "[rdp][encryption_method]"
        "inferences" => "[rdp][inferences]"
        "keyboard_layout" => "[rdp][keyboard_layout]"
        "rdfp_hash" => "[rdp][rdfp_hash]"
        "rdfp_string" => "[rdp][rdfp_string]"
        "rdpeudp_uid" => "[log][id][rdpeudp_uid]"
        "requested_color_depth" => "[rdp][requested_color_depth]"
        "result" => "[rdp][result]"
        "security_protocol" => "[rdp][selected_protocol]"
        "ssl" => "[rdp][ssl]"
      }
      copy => {
        "[rdp][source][build]" => "[software][original]"
        "[rdp][source][name]" => "[source][hostname]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-9cc918485316-main-rdp-20220330.01"
      }
      tag_on_failure => "_mutate_error-9cc918485316"
      id => "filter-mutate-9cc918485316"
    }

    # Event outcome
    if [rdp][auth_successful] in [ true, false ] {
      translate {
        field => "[rdp][auth_successful]"
        exact => true
        dictionary => [
          "true", "success",
          "false", "failure"
        ]
        destination => "[event][outcome]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-translate-81079719ac78-20220310.01"
        }
        id => "filter-translate-81079719ac78"
      }
    }

    if [rdp][inferences] {
      ruby {
        code => '
          inferences = event.get("[rdp][inferences]")
          currently_tagged = event.get("tags")
          inferences_dict = {
            "FC" => "FC: FreeRDP Client - Indicates CLI tool like FreeRDP-based",
            "MSC" => "MSC: Metasploit Scanner Client",
            "APWA" => "APWA: Client authenticated using an NTLM password that was provided before connection initiated (Automated)",
            "HBC" => "HBC: THC-Hydra Bruteforce Client",
            "CBC" => "CBC: Crowbar Bruteforce Client",
            "SLC" => "SLC: SharRDP Lateral Movement Client",
            "SOC" => "SOC: Some other Scanner - Client is likely a scanner or exploit tool that the package can\'t specifically identify",
            "RCGA" => "RCGA: Remote Credential Guard Authentication - Client authenticated with Restricted Admin Mode",
            "RAMA" => "RAMA: Restricted Admin Mode Authentication - Indicates Metasploit Client",
            "IPWA" => "IPWA: Client authenticated using NTLM password that ws provided after the connection was initiated, suggessting a human driven connection",
            "SLH" => "SLH: Slow Handshake - Indicates the handshake took an unusually long time to complete"
          }
          inferences_full = ""
          if !defined?(inferences).nil? && !inferences.nil? && !(inferences.respond_to?(:empty?) && !!inferences.empty?)
            # Is array already?
            if inferences.is_a? Enumerable
              for inference_val in inferences.sort
                inference_full = inferences_dict[inference_val]
                if !inference_full.nil?
                  inferences_full = inferences_full + inference_full + " || "
                else
                  event.tag("Value \'#{inference_val}\' not found in list of rdp inferences dictionary within the logstash pipeline configuration. Please report this to the github repository or maintainer.")
                end
              end
            # Not array, try to split into array
            else
              inferences = inferences.split(",").map!(&:strip)
              for inference_val in inferences.sort
                inference_full = inferences_dict[inference_val]
                if !inference_full.nil?
                  inferences_full = inferences_full + inference_full + " || "
                else
                  event.tag("Value \'#{inference_val}\' not found in list of rdp inferences dictionary within the logstash pipeline configuration. Please report this to the github repository or maintainer.")
                end
              end
            end
          end
          event.set("[rdp][inferences_detailed]", inferences_full)
        '
        tag_on_exception => "_rubyexception-217452cf74e8-rdp_inferences_detailed"
        tag_with_exception_message => true
        add_field => {
          "[@metadata][etl_pipeline]" => "filter-ruby-c3df56dd7c42-20220310.01"
        }
        id => "filter-ruby-c3df56dd7c42"
      }
    }    

  }
}
