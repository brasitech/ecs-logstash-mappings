# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  
  # Anything containing [source][ip]
  if [source][ip] {
    # Only continue if [source][ip] is not an array (more than 1)
    if [source][ip_valid_count] == 1 {
      # Check if [destination][ip] exists
      if [destination][ip] {

        # Use this so don't have to always do a duplicate check later on, save some cycles for the CPU :)
        # Don't ask why doing this and instead of using concatenate below..... because CONCATENATE SORTS.. AND EVEN SORTS when using a string.....WTH
        mutate {
          add_field => {
            "[@metadata][dst_ip_and_src_ip_pair]" => "%{[destination][ip]}%{[source][ip]}"
            "[@metadata][src_ip_and_dst_ip_pair]" => "%{[source][ip]}%{[destination][ip]}"
            "[@metadata][etl][pipeline]" => "filter-mutate-7dec39cbc6bd-2023100901"
          }
          tag_on_failure => "_mutate_error-7dec39cbc6bd-2023100901"
          id => "filter-mutate-7dec39cbc6bd"
        }

        # Fingerprint [destination][ip] and [source][ip] pair
        fingerprint {
          ecs_compatibility => "disabled"
          source => [ "[@metadata][dst_ip_and_src_ip_pair]" ]
          concatenate_sources => false
          method => "SHA1"
          target => "[related][ip_dst_to_src]"
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-fingerprint-8698b5af8086-2023100901"
          }
          id => "filter-fingerprint-8698b5af8086"
        }

        # Fingerprint [source][ip] and [destination][ip] pair
        fingerprint {
          ecs_compatibility => "disabled"
          source => [ "[@metadata][src_ip_and_dst_ip_pair]" ]
          concatenate_sources => false
          method => "SHA1"
          target => "[related][ip_src_to_dst]"
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-fingerprint-f093b301cae9-2023100901"
          }
          id => "filter-fingerprint-f093b301cae9"
        }

        # In order to do a true any ip pair field, we need to sort the two hashes above, and then fingerprint
        # also lets determine if [source][ip] is the same as [destination][ip]
        ruby {
          code => '
            # Get the two hashes above
            ip_dst_n_src_pair = event.get("[related][ip_dst_to_src]")
            ip_src_n_dst_pair = event.get("[related][ip_src_to_dst]")
            # See if dst equals src
            dst_same_as_src = ip_dst_n_src_pair != ip_src_n_dst_pair
            # Create SHA1 hash of the sorted & joined hashes
            ip_pair_any = Digest::SHA1.hexdigest([ ip_dst_n_src_pair, ip_src_n_dst_pair ].sort.join(""))
            event.set("[related][ip_pair_any_dst_and_src]", ip_pair_any)
            event.set("[related][network_dst_src_ip_unique]", dst_same_as_src)
          '
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-ruby-970ac8a807d8-2023100901"
          }
          tag_on_exception => "_rubyexception-970ac8a807d8-2023100901"
          id => "filter-ruby-970ac8a807d8"
        }

        # Check if [network][transport] and [destination][port] exist
        if [network][transport] and [destination][port] {

          # Fingerprint the network 4 tuple
          # But lets use the "[related][ip_src_to_dst]" hash from above, so we don't have to rehash 2 things already hashed, save some cycles for the CPU :)
          fingerprint {
            ecs_compatibility => "disabled"
            source => [ "[related][ip_src_to_dst]", "[destination][port]", "[network][transport]" ]
            concatenate_sources => true
            method => "SHA1"
            target => "[related][network_4tuple_hash]"
            add_field => {
              "[@metadata][etl][pipeline]" => "filter-fingerprint-2431f6bf9470-2023100901"
            }
            id => "filter-fingerprint-2431f6bf9470"
          }
          
          # Fingerprint the network 5 tuple using Corelight Community ID
          # Because some logs add this field, check to make sure this field does NOT already exist
          if ![network][community_id] and [source][port] and [destination][ip_valid_count] == 1 {
            ruby {
              code => '
                require "base64"
                require "digest"
                require "socket"
                
                network_community_id = nil
                src_ip = event.get("[source][ip]")
                src_p = event.get("[source][port]").to_i
                dst_ip = event.get("[destination][ip]")
                dst_p = event.get("[destination][port]").to_i
                protocol = event.get("[network][transport]")
                use_base64 = true
                network_community_id_seed = 0
                                    
                network_transport_protocols = [
                  "icmp",
                  "icmp6",
                  "sctp",
                  "tcp",
                  "udp"
                ]
                
                network_transport_protocol_to_code = {
                  "icmp" => 1,
                  "icmp6" => 58,
                  "tcp" => 6,
                  "udp" => 17
                }
                
                icmp_codes = {
                  # Echo => Reply
                  8 => 0,
                  # Reply => Echo
                  0 => 8,
                  # Timestamp => TS reply
                  13 => 14,
                  # TS reply => timestamp
                  14 => 13,
                  # Info request => Info Reply
                  15 => 16,
                  # Info Reply => Info Req
                  16 => 15,
                  # Rtr solicitation => Rtr Advertisement
                  10 => 9,
                  # Mask => Mask reply
                  17 => 18,
                  # Mask reply => Mask
                  18 => 17,
                }
                
                icmp6_codes = {
                  # Echo Request => Reply
                  128 => 129,
                  # Echo Reply => Request
                  129 => 128,
                  # Router Solicit => Advert
                  133 => 134,
                  # Router Advert => Solicit
                  134 => 133,
                  # Neighbor Solicit => Advert
                  135 => 136,
                  # Neighbor Advert => Solicit
                  136 => 135,
                  # Multicast Listener Query => Report
                  130 => 131,
                  # Multicast Report => Listener Query
                  131 => 130,
                  # Node Information Query => Response
                  139 => 140,
                  # Node Information Response => Query
                  140 => 139,
                  # Home Agent Address Discovery Request => Reply
                  144 => 145,
                  # Home Agent Address Discovery Reply => Request
                  145 => 144,
                }
                
                community_id_version = "1:"
                
                def bin_to_hex(s)
                  s.each_byte.map { |b| b.to_s(16).rjust(2, "0") }.join(":")
                end
                
                
                # Parse to sockaddr_in struct bytestring
                src = Socket.sockaddr_in(src_p, src_ip)
                dst = Socket.sockaddr_in(dst_p, dst_ip)
              
                is_one_way = false
                # Special case handling for ICMP type/codes
                if protocol == "icmp" || protocol == "icmp6"
                  if src.length == 16 # IPv4
                    if icmp_codes.has_key?(src_p) == false
                      is_one_way = true
                    end
                  elsif src.length == 28 # IPv6
                    if icmp6_codes.has_key?(src_p) == false
                      is_one_way = true
                    end
                    # Set this correctly if not already set
                    protocol = "icmp6"
                  end
                end
              
                # Fetch the protocol number
                proto = network_transport_protocol_to_code.fetch(protocol.downcase, 0)
              
                # Parse out the network-ordered bytestrings for ip/ports
                if src.length == 16 # IPv4
                  sip = src[4,4]
                  sport = src[2,2]
                elsif src.length == 28 # IPv6
                  sip = src[4,16]
                  sport = src[2,2]
                end
                if dst.length == 16 # IPv4
                  dip = dst[4,4]
                  dport = dst[2,2]
                elsif dst.length == 28 # IPv6
                  dip = dst[4,16]
                  dport = dst[2,2]
                end
              
                if !( is_one_way || ((sip <=> dip) == -1) || ((sip == dip) && ((sport <=> dport) < 1)) )
                  mip = sip
                  mport = sport
                  sip = dip
                  sport = dport
                  dip = mip
                  dport = mport
                end
              
                # Hash all the things
                hash = Digest::SHA1.new
                hash.update([network_community_id_seed].pack("n")) # 2-byte seed
              
                hash.update(sip)  # 4 bytes (v4 addr) or 16 bytes (v6 addr)
                hash.update(dip)  # 4 bytes (v4 addr) or 16 bytes (v6 addr)
              
                hash.update([proto].pack("C")) # 1 byte for transport proto
                hash.update([0].pack("C")) # 1 byte padding
              
                # If transport protocol, hash the ports too
                hash.update(sport) # 2 bytes for port
                hash.update(dport) # 2 bytes for port
              
                if use_base64
                    network_community_id = community_id_version + Base64.strict_encode64(hash.digest)
                else
                    network_community_id = community_id_version + hash.hexdigest
                end
              
                event.set("[network][community_id]", network_community_id)
              '
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-ruby-0722ca09a3a7-20220726.01"
              }
              tag_on_exception => "_rubyexception-0722ca09a3a7-network_community_id-enrichment-20220726.01"
              tag_with_exception_message => true
              id => "filter-ruby-0722ca09a3a7"
            }
          }

        }
        
      }
    }
  }
}
