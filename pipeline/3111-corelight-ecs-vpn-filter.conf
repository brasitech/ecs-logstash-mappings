# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and [@metadata][z_no_reuse][event_sub_type] == "vpn" {

    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_suffix]" => "various"
        "[event][category]" => "network"
      }
      rename => {
        "client_info" => "[vpn][client_info]"
        "duration" => "[event][duration]"
        "inferences" => "[vpn][inferences]"
        "issuer" => "[tls][server][issuer]"
        "ja3" => "[tls][client][ja3]"
        "ja3s" => "[tls][server][ja3s]"
        "orig_bytes" => "[source][bytes]"
        "orig_cc" => "[source][geo][country_iso_code]"
        "orig_city" => "[source][geo][city_name]"
        "orig_region" => "[source][geo][region_name]"
        "resp_bytes" => "[destination][bytes]"
        "resp_cc" => "[destination][geo][country_iso_code]"
        "resp_city" => "[destination][geo][city_name]"
        "resp_region" => "[destination][geo][region_name]"
        "server_name" => "[vpn][server_name]"
        "service" => "[network][protocol]"
        "subject" => "[tls][server][subject]"
        "vpn_type" => "[vpn][name]"
      }
      copy => {
        "[vpn][server_name]" => "[destination][domain]"
      }
      add_field => {
        "[labels][etl][pipeline]" => "filter-mutate-967edee657a9-main-vpn-20220719.01"
      }
      tag_on_failure => "_mutate_error-967edee657a9"
      id => "filter-mutate-967edee657a9"
    }

    # Detailed "description" of [vpn][inferences]  
    if [vpn][inferences] {
      ruby {
        code => '
          inferences = event.get("[vpn][inferences]")
          currently_tagged = event.get("tags")
          inferences_dict = {
            "COM" => "COM: Commercial VPN service.  PrivateInternetAccess and NordVPN are examples of commercial VPNs",
            "FW" => "FW: The user is likely trying to subvert a firewall by using something firewalls usually pass, like port 53/udp",
            "NSP" => "NSP: Non standard port for the given VPN protocol",
            "RW" => "RW: Road warrior VPN configuration detected, instead of site to site. Cisco Anyconnect and PAN GlobalProtect are examples of road warrior VPNs"
          }
          inferences_full = ""
          if !defined?(inferences).nil? && !inferences.nil? && !(inferences.respond_to?(:empty?) && !!inferences.empty?)
            # Is array already?
            if inferences.is_a? Enumerable
              for inference_val in inferences.sort
                inference_full = inferences_dict[inference_val]
                if !inference_full.nil?
                  inferences_full = inferences_full + inference_full + " || "
                else
                  event.tag("Value \'#{inference_val}\' not found in list of vpn inferences dictionary within the logstash pipeline configuration. Please report this to the github repository or maintainer.")
                end
              end
            # Not array, try to split into array
            else
              inferences = inferences.split(",").map!(&:strip)
              for inference_val in inferences.sort
                inference_full = inferences_dict[inference_val]
                if !inference_full.nil?
                  inferences_full = inferences_full + inference_full + " || "
                else
                  event.tag("Value \'#{inference_val}\' not found in list of vpn inferences dictionary within the logstash pipeline configuration. Please report this to the github repository or maintainer.")
                end
              end
            end
          end
          event.set("[vpn][inferences_detailed]", inferences_full)
        '
        tag_on_exception => "_rubyexception-96b5b202898d-vpn_inferences_detailed"
        add_field => {
          "[labels][etl][pipeline]" => "filter-ruby-96b5b202898d-20220328.01"
        }
        id => "filter-ruby-96b5b202898d"
      }
    }

    # Event duration
    if [event][duration] {
      ruby {
        code => '
          event_duration = event.get("[event][duration]")
          duration = event_duration.to_f * 1000000000
          event.set("[event][duration]", duration)
        '
        add_field => {
          "[labels][etl][pipeline]" => "filter-ruby-74786f73b125-20220310.01"
        }
        tag_on_exception => "_rubyexception-74786f73b125-event.duration_to_nanoseconds-20220310.01"
        id => "filter-ruby-74786f73b125"
      }
    }
      
  }
}
