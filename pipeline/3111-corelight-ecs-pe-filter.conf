# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and [@metadata][z_no_reuse][event_sub_type] == "pe" {

    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "various"
        "[event][category]" => "file"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CORELIGHT_INDEX_NAME_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CORELIGHT_INDEX_DATASET_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CORELIGHT_INDEX_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "compile_ts" => "[file][created_non_formatted_date]"
        "has_cert_table" => "[pe][has_cert_table]"
        "has_debug_data" => "[pe][has_debug_data]"
        "has_export_table" => "[pe][has_export_table]"
        "has_import_table" => "[pe][has_import_table]"
        "is_64bit" => "[pe][is_64bit]"
        "is_exe" => "[pe][is_exe]"
        "machine" => "[pe][machine]"
        "os" => "[pe][os]"
        "section_names" => "[pe][section_names]"
        "subsystem" => "[pe][subsystem]"
        "uses_aslr" => "[pe][uses_aslr]"
        "uses_code_integrity" => "[pe][uses_code_integrity]"
        "uses_dep" => "[pe][uses_dep]"
        "uses_seh" => "[pe][uses_seh]"
      }
      replace => {
        "[event][id]" => "%{[log][id][id]}"
      }
      copy => {
        "[log][id][id]" => "[log][id][fuid]"
      }
      add_field => {
        "[file][type]" => "pe"
        "[@metadata][etl][pipeline]" => "filter-mutate-08ad0aa5f5f4-main-pe-20220330.01"
      }
      tag_on_failure => "_mutate_error-08ad0aa5f5f4"
      id => "filter-mutate-08ad0aa5f5f4"
    }
    # times.created/times_created
    # [file][created]/[file][created_non_formatted_date]
    # check field's date format whether is already in "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ" OR "UNIX", to cover both corelight specific time and opensource zeek specific time formats
    if [file][created_non_formatted_date] {
      date {
        match => [ "[file][created_non_formatted_date]", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", "UNIX" ]
        target => "[file][created]"
        add_field => {
          "[@metadata][z_no_reuse][file_created_string]" => "%{[file][created]}"
          "[@metadata][etl][pipeline]" => "filter-date-cbf30d16dfe2-2023111401"
        }
        tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-cbf30d16dfe2-2023111401", "_parsefailure" ]
        id => "filter-date-cbf30d16dfe2"
      }
    }
    # Check if the converted date is going to cause a mapping of date issue despite "technically" being a valid date. ie: the year 40000
    if [@metadata][z_no_reuse][file_created_string] !~ /^\d{4}-/ {
      mutate {
        remove_field => [ "[file][created]" ]
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-date-a32cf508dd7c-2023111401"
        }
        tag_on_failure => "_mutate_error-a32cf508dd7c"
        id => "filter-mutate-a32cf508dd7c"
      }
    }

  }
}
