# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" {
    
    # If [destination][ip] field exists from previous config settings
    if [destination][ip] {
      # Make sure IP is valid, rfc check, private/public, and cleanup common things like preceding "0" and or file share/path "\"
      # Also determine if IPv4 or IPv6
      ruby {
        path => "/etc/logstash/pipelines/ecs-logstash-corelight/ruby/corelight-ecs-ip_clean_and_public-ruby.rb"
        script_params => {
          "parent_field" => "[destination]"
          "ip" => "[destination][ip]"
          "is_ipv6" => "[destination][is_ipv6]"
        }
        add_field =>  {
          "[@metadata][etl][pipeline]" => "filter-ruby-56531bf4c88a-20220310.01"
        }
        tag_on_exception =>  "_rubyexception-56531bf4c88a-destination-ip_clean_and_public.rb-20220310.01"
        id => "filter-ruby-56531bf4c88a"
      }
      # If still has valid IP(s) after cleanup
      if [destination][ip] {
        # Only perform geo enrichment if is a public IP
        if [destination][ip_public] == "true" {
          geoip {
            source => "[destination][ip]"
            target => "[destination][geo]"
            default_database_type => "City"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            #:default:# cache_size => 1000
            cache_size => 90000
            add_field =>  {
              "[@metadata][destination_ip_geo_location_successful]" => "true"
              "[@metadata][etl][pipeline]" => "filter-geoip-c2c25d701e37-20220321.02"
            }
            #fields => [
            #  "city_name",
            #  "continent_code",
            #  "country_code2",
            #  "country_code3",
            #  "country_name",
            #  "dma_code",
            #  "latitude",
            #  "location",
            #  "longitude",
            #  "postal_code",
            #  "region_name", "timezone"
            #]
            remove_field => [
              "[destination][geo][ip]",
              "[destination][geo][latitude]",
              "[destination][geo][longitude]",
              "[destination][geo][country_code2]",
              "[destination][geo][country_code3]"
            ]
            tag_on_failure => [ "_geoip_lookup_failure", "parsefailure-geoip-city-destination_ip", "_geoip_lookup_failure-c2c25d701e37-20220321.02" ]
            id => "filter-geoip-c2c25d701e37"
          }
          # Make ECS compliant
          if [@metadata][destination_ip_geo_location_successful] {
            mutate {
              rename => {
                "[destination][geo][region_code]" => "[destination][geo][region_iso_code]"
              }
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-mutate-8e679e54306a-20220321.01"
              }
              tag_on_failure => "_mutate_error-8e679e54306a-20220321.01"
              id => "filter-mutate-8e679e54306a"
            }
          }
          geoip {
            source => "[destination][ip]"
            target => "[destination][as]"
            default_database_type => "ASN"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            #:default:# cache_size => 1000
            cache_size => 90000
            add_field =>  {
              "[@metadata][destination_ip_bgp_as_info_successful]" => "true"
              "[@metadata][etl][pipeline]" => "filter-geoip-7d8fcde65e8b-20220310.01"
            }
            remove_field => [ "[destination][as][ip]" ]
            tag_on_failure => [ "_geoip_lookup_failure", "parsefailure-geoip-asn-destination_ip", "_geoip_lookup_failure-7d8fcde65e8b-20220310.01" ]
            id => "filter-geoip-7d8fcde65e8b"
          }
  
          # Make ECS compliant
          if [@metadata][destination_ip_bgp_as_info_successful] {
            mutate {
              rename => {
                "[destination][as][asn]" => "[destination][as][number]"
                "[destination][as][organization_name]" => "[destination][as][organization][name]"
                "[destination][as][as_org]" => "[destination][as][organization][name]"
              }
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-mutate-8bd5224c1084-20220310.01"
              }
              tag_on_failure => "_mutate_error-8bd5224c1084-20220310.01"
              id => "filter-mutate-8bd5224c1084"
            }
          }
  
        }
      }
      # Copy destination.ip to destination.address in a sweeping fashion so don't have to one off it every time
      if ![destination][address] {
        mutate {
          copy => {
            "[destination][ip]" => "[destination][address]"
          }
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-mutate-139f9ea9cbaa-20220310.01"
          }
          tag_on_failure => "_mutate_error-139f9ea9cbaa-20220310.01"
          id => "filter-mutate-139f9ea9cbaa"
        }
      }
  
    }
  }
}
