# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [@metadata][z_no_reuse][event_sub_type] == "ssh" ) {
    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "various"
        "[event][category]" => "network"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CORELIGHT_INDEX_NAME_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CORELIGHT_INDEX_DATASET_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CORELIGHT_INDEX_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "auth_attempts" => "[ssh][auth_attempts]"
        "auth_success" => "[ssh][auth_successful]"
        "cipher_alg" => "[ssh][cipher]"
        "client" => "[ssh][client]"
        "compression_alg" => "[ssh][compression_algorithm]"
        "cshka" => "[ssh][cshka]"
        "direction" => "[network][direction]"
        "hassh" => "[ssh][hassh]"
        "hasshAlgorithms" => "[ssh][hasshAlgorithms]"
        "hasshServer" => "[ssh][hasshServer]"
        "hasshServerAlgorithms" => "[ssh][hasshServerAlgorithms]"
        "hasshVersion" => "[ssh][hasshVersion]"
        "host_key" => "[ssh][host_key]"
        "host_key_alg" => "[ssh][key_algorithm]"
        "inferences" => "[ssh][inferences]"
        "kex_alg" => "[ssh][key_exchange_algorithm]"
        "mac_alg" => "[ssh][mac_algorithm]"
        "remote_location" => "[ssh][remote_location]"
        "server" => "[ssh][server]"
        "sshka" => "[ssh][sshka]"
        "version" => "[ssh][version]"
      }
      copy => {
        "[ssh][client]" => "[source][software][original]"
        "[ssh][server]" => "[destination][software][original]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-be8794878f2b-main-ssh-20220325.01"
      }
      tag_on_failure => "_mutate_error-be8794878f2b-20220325.01"
      id => "filter-mutate-be8794878f2b"
    }

    # Event outcome
    if [ssh][auth_successful] in [ true, false ] {
      translate {
        field => "[ssh][auth_successful]"
        exact => true
        dictionary => [
          "true", "success",
          "false", "failure"
        ]
        destination => "[event][outcome]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-translate-5214561a3200-20220310.01"
        }
        id => "filter-translate-5214561a3200"
      }
    }
    # Detailed "description" of [ssh][inferences]  
    if [ssh][inferences] {
      ruby {
        code => '
          inferences = event.get("[ssh][inferences]")
          currently_tagged = event.get("tags")
          inferences_dict = {
            "ABP" => "ABP: Authentication Bypass - Client not within expectations of SSH either by server exploit or client/server switching to different protocol after encryption begins",
            "AFR" => "AFR: SSH Agent Forwarding Requested by Client",
            "APWA" => "APWA: The Client authenticated with an automated password tool (like sshpass)",
            "AUTO" => "AUTO: The client is a script or automated utility and not user driven",
            "BAN" => "BAN: The server sent the client a pre-authentication banner",
            "BF" => "BF: A client made a number of authentication attempts that exceeded some configured, peer-connection threshold",
            "BFS" => "BFS: Client brute force success",
            "CTS" => "CTS: The client already has an entry in its known_hosts file for this server",
            "CUS" => "CUS: The client did not have an entry in its known_hosts file for this server",
            "IPWA" => "IPWA: The client interactively typed their password t authenticate",
            "KS" => "KS: An interactive session occurred in which the client set user-driven keystrokes to the server",
            "LFD" => "LFD: Large File Client Download - A large file transfer occurred from server to client",
            "LFU" => "LFU: Large File Client Upload - A large file transfer occurred form client to server",
            "MFA" => "MFA: Server required a second factor of authentication (code) and the client successfully provided it",
            "NA" => "NA: Client successfully authenticated using the none method",
            "NRC" => "NRC: The -N flag was used (no remote command)",
            "PKA" => "PKA: The client automatically authenticated using a public key",
            "RSI" => "RSI: A reverse session is initiated for the server back to the client",
            "RSIA" => "RSIA: The initiation of the reverse session happened very early in the packet stream, indicating automation",
            "RSK" => "RSK: Keystrokes are detected within the reverse tunnel",
            "RSL" => "RSL: The reverse tunnel login has succeeded",
            "RSP" => "RSP: The client connected with a -R flag, which provisions the ports to be used for a Reverse session set up at any future time",
            "SA" => "SA: Authentication Scanning - the client scanned authentication methods with the server and then disconnected",
            "SC" => "SC: Capabilities Scanning - the client exchanged capabilities with the server and then disconnected",
            "SFD" => "SFD: Small File Client Download - A  small file transfer occurred from server to client",
            "SFU" => "SFU: Small File Client Upload - A small file transfer occurred from client to server",
            "SP" => "SP: Other Scanning - Client and server did not exchange encrypted packets but client was not a version or capabilities scanner",
            "SV" => "SV: Version Scanning - Client exchanged version strings with server and disconnected",
            "UA" => "UA: Authentication method is not determined or unknown"
          }
          inferences_full = ""
          if !defined?(inferences).nil? && !inferences.nil? && !(inferences.respond_to?(:empty?) && !!inferences.empty?)
            # Is array already?
            if inferences.is_a? Enumerable
              for inference_val in inferences.sort
                inference_full = inferences_dict[inference_val]
                if !inference_full.nil?
                  inferences_full = inferences_full + inference_full + " || "
                else
                  event.tag("Value \'#{inference_val}\' not found in list of ssh inferences dictionary within the logstash pipeline configuration. Please report this to the github repository or maintainer.")
                end
              end
            # Not array, try to split into array
            else
              inferences = inferences.split(",").map!(&:strip)
              for inference_val in inferences.sort
                inference_full = inferences_dict[inference_val]
                if !inference_full.nil?
                  inferences_full = inferences_full + inference_full + " || "
                else
                  event.tag("Value \'#{inference_val}\' not found in list of ssh inferences dictionary within the logstash pipeline configuration. Please report this to the github repository or maintainer.")
                end
              end
            end
          end
          event.set("[ssh][inferences_detailed]", inferences_full)
        '
        tag_on_exception => "_rubyexception-117452cf74e8-ssh_inferences_detailed"
        tag_with_exception_message => true
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-117452cf74e8-20220310.01"
        }
        id => "filter-ruby-117452cf74e8"
      }
    }    
  }
}
