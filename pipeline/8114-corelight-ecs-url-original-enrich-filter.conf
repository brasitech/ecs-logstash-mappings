# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [url][original] {
      
    ruby {
      init => '
        require "addressable/uri"
      '
      code => '
        url = event.get("[url][original]")
        url_total_paths = 0

        # Length of url
        url_length = url.length

        # Total "paths" (ie: "/")
        url_total_paths = url.split("/").length - 1
        # If url after being cleaned or originally is only "/" then we will get -1 so need to say if -1 set to 0
        if url_total_paths == -1
            url_total_paths = 1
        end

        # url Contains non ascii
        url_has_non_ascii = !url.ascii_only?

        # url Contains non whitespace
        url_has_whitespace = url.match?(/\s/)
        
        # compliant syntax for url
        url_rfc_compliant = true

        # URL/HTTP is a best practice and not strict.
        begin
            url_parsed = Addressable::URI.parse(url)
            #url_extension = url_parsed.extname
            url_extension = url_parsed.extname[1..-1] #without dot "[1..-1]"
            url_query = url_parsed.query
            url_user = url_parsed.user
            url_password = url_parsed.password
            url_scheme = url_parsed.scheme
            url_port = url_parsed.port
            url_host = url_parsed.host
            url_path = url_parsed.path
            # may not exist, but want to grab these in case log/event already (has) set these
            previous_url_extension = event.get("[url][extension]")
            previous_url_query = event.get("[url][query]")
            previous_url_user = event.get("[source][user][name]")
            previous_url_password = event.get("[source][user][password]")
            previous_url_scheme = event.get("[url][scheme]")
            previous_url_port = event.get("[url][port]")
            previous_url_host = event.get("[url][domain]")
            previous_url_path = event.get("[url][path]")

            previous_url_scheme = event.get("[url][scheme]")

            if !url_extension.nil? && !url_extension.empty? && !defined?(previous_url_extension).nil?
                event.set("[url][extension]", url_extension[1..-1])
                event.set("[url][extension_length]",url_extension.length)
            end
            if !url_query.nil? && !url_query.empty? && !defined?(previous_url_query).nil?
                event.set("[url][query]", url_query)
                event.set("[url][query_length]", url_query.length)
            end
            if !url_user.nil? && !url_user.empty? && !defined?(previous_url_user).nil?
                event.set("[source][user][name]", url_user)
            end
            if !url_password.nil? && !url_password.empty? && !defined?(previous_url_password).nil?
                event.set("[source][user][password]", url_password)
            end
            #if !url_scheme.nil? && !url_scheme.empty? && !defined?(previous_url_scheme).nil?
            if !url_scheme.nil? && !url_scheme.empty?
                event.set("[url][scheme]", url_scheme)
            end
            if !url_port.nil? && !url_port.to_s.empty? && !defined?(previous_url_port).nil?
                event.set("[url][port]", url_port)
            end
            if !url_path.nil? && !url_path.to_s.empty? && !defined?(previous_url_path).nil?
                event.set("[url][path]", url_path)
                event.set("[url][path_length]", url_path.length)
            end
        rescue Addressable::URI::InvalidURIError
            # Add a value so we know there was an erroneous url
            current_tagged_log = event.get("tags")
            url_rfc_compliant = false
            tagged_value = "invalid url"
            # Field exists so append
            if !defined?(current_tagged_log).nil?
                # If multiple values append to existing array
                if current_tagged_log.is_a? Enumerable
                    new_tagged_log = current_tagged_log.push(tagged_value)
                # Single value so create an array
                else
                    new_tagged_log = [ current_tagged_log, tagged_value ]
                end
                event.set("tags", new_tagged_log)
            # Field doesn"t exist so safe to create
            else
                event.set("tags", tagged_value)
            end
        rescue ArgumentError => e
            # Add a value so we know there was a string error
            current_tagged_log = event.get("meta_log_tags")
            tagged_value = %Q"url error: #{e.message}"
            # Field exists so append
            if !defined?(current_tagged_log).nil?
                # If multiple values append to existing array
                if current_tagged_log.is_a? Enumerable
                    new_tagged_log = current_tagged_log.push(tagged_value)
                # Single value so create an array
                else
                    new_tagged_log = [ current_tagged_log, tagged_value ]
                end
                event.set("tags", new_tagged_log)
            # Field does not exist so safe to create
            else
                event.set("tags", tagged_value)
            end
        end

        # Set additional event parameters
        event.set("[url][has_non_ascii]", url_has_non_ascii)
        event.set("[url][has_whitespace]", url_has_whitespace)
        event.set("[url][rfc_compliant]", url_rfc_compliant)
        event.set("[url][original_length]", url_length)
        event.set("[url][total_paths]", url_total_paths)
      '
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-ruby-5b5a4def75aa-20220606.01"
      }
      tag_on_exception => "_rubyexception-5b5a4def75aa-url.original-enrichment-20220606.01"
      id => "filter-ruby-5b5a4def75aa"
    }

  }
}
