# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [@metadata][z_no_reuse][event_sub_type] == "x509" or [@metadata][z_no_reuse][event_sub_type] == "x509_red" ) {
    
    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_suffix]" => "x509"
        "[event][category]" => "file"
      }
      rename => {
        "basic_constraints.ca" => "[file][x509][certificate][basic_constraints_ca]"
        "basic_constraints.path_length" => "[file][x509][certificate][basic_constraints_path_length]"
        "basic_constraints_ca" => "[file][x509][certificate][basic_constraints_ca]"
        "basic_constraints_path_length" => "[file][x509][certificate][basic_constraints_path_length]"
        "certificate.cn" => "[file][x509][certificate][common_name]"
        "certificate.curve" => "[file][x509][public_key_curve]"
        "certificate.exponent" => "[file][x509][certificate][exponent]"
        "certificate.issuer" => "[file][x509][issuer][distinguished_name]"
        "certificate.key_alg" => "[file][x509][public_key_algorithm]"
        "certificate.key_length" => "[file][x509][public_key_size]"
        "certificate.key_type" => "[file][x509][public_key_type]"
        "certificate.logcert" => "[file][x509][logcert]"
        "certificate.not_valid_after" => "[file][x509][not_after]"
        "certificate.not_valid_before" => "[file][x509][not_before]"
        "certificate.serial" => "[file][x509][serial_number]"
        "certificate.serial_number" => "[file][x509][serial_number]"
        "certificate.sig_alg" => "[file][x509][signature_algorithm]"
        "certificate.subject" => "[file][x509][subject][distinguished_name]"
        "certificate.version" => "[file][x509][subject][version_number]"
        "certificate_cn" => "[file][x509][certificate][common_name]"
        "certificate_curve" => "[file][x509][public_key_curve]"
        "certificate_exponent" => "[file][x509][certificate][exponent]"
        "certificate_issuer" => "[file][x509][issuer][distinguished_name]"
        "certificate_key_alg" => "[file][x509][public_key_algorithm]"
        "certificate_key_length" => "[file][x509][public_key_size]"
        "certificate_key_type" => "[file][x509][public_key_type]"
        "certificate_logcert" => "[file][x509][logcert]"
        "certificate_not_valid_after" => "[file][x509][not_after]"
        "certificate_not_valid_before" => "[file][x509][not_before]"
        "certificate_serial" => "[file][x509][serial_number]"
        "certificate_serial_number" => "[file][x509][serial_number]"
        "certificate_sig_alg" => "[file][x509][signature_algorithm]"
        "certificate_subject" => "[file][x509][subject][distinguished_name]"
        "certificate_version" => "[file][x509][subject][version_number]"
        "san.dns" => "[file][x509][san_dns]"
        "san.email" => "[file][x509][san_email]"
        "san.ip" => "[file][x509][san_ip]"
        "san.uri" => "[file][x509][san_uri]"
        "san_dns" => "[file][x509][san_dns]"
        "san_email" => "[file][x509][san_email]"
        "san_ip" => "[file][x509][san_ip]"
        "san_uri" => "[file][x509][san_uri]"
      }
      copy => {
        "[file][x509][san_uri]" => "[url][original]"
      }
      replace => {
        "[event][id]" => "%{[log][id][id]}"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-b76a7d5a369a-main-x509-20220310.01"
      }
      tag_on_failure => "_mutate_error-b76a7d5a369a"
      id => "filter-mutate-b76a7d5a369a"
    }

    # check to make sure not already in a possible date format
    if [file][x509][not_after] !~ /^\d\d\d\d\-.*$/ {
      date {
        match => [ "[file][x509][not_after]", "UNIX" ]
        #timezone => "UTC"
        target => "temporary_file_x509_not_after"
        remove_field => "[file][x509][not_after]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-date-0208b4090f45-20220310.01"
        }
        tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-0208b4090f45-20220310.01", "_parsefailure" ]
        id => "filter-date-0208b4090f45"
      }
    }

    # check to make sure not already in a possible date format
    if [file][x509][not_after] !~ /^\d\d\d\d\-.*$/ {
      date {
        match => [ "[file][x509][not_before]", "UNIX" ]
        #timezone => "UTC"
        target => "temporary_file_x509_not_before"
        remove_field => "[file][x509][not_before]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-date-d64fd222547a-20220310.01"
        }
        tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-d64fd222547a-20220310.01", "_parsefailure" ]
        id => "filter-date-d64fd222547a"
      }
    }

    mutate {
      rename => {
        "temporary_file_x509_not_after" => "[file][x509][not_after]"
        "temporary_file_x509_not_before" => "[file][x509][not_before]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-65b95e7a00e9-20220310.01"
      }
      tag_on_failure => "_mutate_error-65b95e7a00e9-20220310.01"
      id => "filter-mutate-65b95e7a00e9"
    }

  }
}
