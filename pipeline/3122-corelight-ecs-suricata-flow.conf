filter {
  if [@metadata][stage] == "suricata_json" {
#TODO:
    if [flow] {
      mutate {
        rename => {
          "[flow][age]" => "[event][duration]"
          "[flow][bytes_toclient]" => "[destination][bytes]"
          "[flow][bytes_toserver]" => "[source][bytes]"
          "[flow][pkts_toclient]" => "[destination][packets]"
          "[flow][pkts_toserver]" => "[source][packets]"
        }
      }
      if [event][duration] {
        ruby {
          code => "
            event_duration = event.get('[event][duration]')
            event.set('[event][duration]', event_duration * 1000000)
          "
          tag_on_exception => "_rubyexception-suricata-flow-duration_to_nanoseconds"
          tag_with_exception_message => true
        }
      }
      # Add bytes so we can get totals
      if [source][bytes] {
        ruby {
          code => "
            src = event.get('[source][bytes]')
            dst = event.get('[destination][bytes]')
            # Destination/Server bytes may not always exist, ie: broadcast
            if !dst.nil?
              total = src + dst
            else
              total = src
            end
            event.set('[network][bytes]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_bytes"
          tag_with_exception_message => true
        }
      }
      # Add packets so we can get totals
      if [source][packets] {
        ruby {
          code => "
            src = event.get('[source][packets]')
            dst = event.get('[destination][packets]')
            total = src + dst
            event.set('[network][packets]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_packets"
          tag_with_exception_message => true
        }
      }
    }
  }
}
