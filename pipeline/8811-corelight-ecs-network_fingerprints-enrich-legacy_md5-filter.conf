# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][env_vars][disable_legacy_md5_fingerprint_hash] != "false" {
    # Only perform if a fingerprint field that would already exist and so we don't have to recheck all the fields
    if [related][ip_dst_to_src] {

      fingerprint {
        ecs_compatibility => "disabled"
        source => [ "[@metadata][dst_ip_and_src_ip_pair]" ]
        concatenate_sources => false
        method => "MD5"
        target => "_temp_legacy_md5_related_ip_dst_to_src"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-fingerprint-fa158d19dc91-2023100901"
        }
        id => "filter-fingerprint-fa158d19dc91"
      }

      if [related][ip_src_to_dst] {
        fingerprint {
          ecs_compatibility => "disabled"
          source => [ "[@metadata][src_ip_and_dst_ip_pair]" ]
          concatenate_sources => false
          method => "MD5"
          target => "_temp_legacy_md5_related_ip_src_to_dst"
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-fingerprint-0f215dba40ff-2023100901"
          }
          id => "filter-fingerprint-0f215dba40ff"
        }
      }

      if [related][ip_pair_any_dst_and_src] or [related][network_dst_src_ip_unique] {
        ruby {
          code => '
            # Get the two hashes above
            ip_dst_n_src_pair = event.get("[related][ip_dst_to_src]")
            ip_src_n_dst_pair = event.get("[related][ip_src_to_dst]")
            # See if dst equals src
            dst_same_as_src = ip_dst_n_src_pair != ip_src_n_dst_pair
            # Create MD5 hash of the sorted & joined hashes
            ip_pair_any = Digest::MD5.hexdigest([ ip_dst_n_src_pair, ip_src_n_dst_pair ].sort.join(""))
            event.set("_temp_legacy_md5_related_ip_pair_any_dst_and_src", ip_pair_any)
            event.set("_temp_legacy_md5_related_network_dst_src_ip_unique", dst_same_as_src)
          '
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-ruby-998aa4bc09c5-2023100901"
          }
          tag_on_exception => "_rubyexception-998aa4bc09c5-2023100901"
          id => "filter-ruby-998aa4bc09c5"
        }
      }

      if [related][network_4tuple_hash] {
        fingerprint {
          ecs_compatibility => "disabled"
          source => [ "[related][ip_src_to_dst]", "[destination][port]", "[network][transport]" ]
          concatenate_sources => true
          method => "MD5"
          target => "_temp_legacy_md5_related_network_4tuple_hash"
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-fingerprint-339a94d7883a-2023100901"
          }
          id => "filter-fingerprint-339a94d7883a"
        }
      }
      mutate {
        merge => {
          "[related][ip_dst_to_src]" => "_temp_legacy_md5_related_ip_dst_to_src"
          "[related][ip_src_to_dst]" => "_temp_legacy_md5_related_ip_src_to_dst"
          "[related][ip_pair_any_dst_and_src]" => "_temp_legacy_md5_related_ip_pair_any_dst_and_src"
          "[related][network_4tuple_hash]" => "_temp_legacy_md5_related_network_4tuple_hash"
        }
        remove_field => [
          "_temp_legacy_md5_related_ip_dst_to_src",
          "_temp_legacy_md5_related_ip_src_to_dst",
          "_temp_legacy_md5_related_ip_pair_any_dst_and_src",
          "_temp_legacy_md5_related_network_dst_src_ip_unique",
          "_temp_legacy_md5_related_network_4tuple_hash"
        ]
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-mutate-a6c39ed8d076-2023100901"
        }
        tag_on_failure => "_mutate_error-a6c39ed8d076-2023100901"
        id => "filter-mutate-a6c39ed8d076"
      }

    }
  }
}
