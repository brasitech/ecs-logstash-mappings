# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" {
    
    # If [destination][ip] field exists from previous config settings
    if [destination][ip] {
      # Make sure IP is valid, rfc check, private/public, and cleanup common things like preceding "0" and or file share/path "\"
      # Also determine if IPv4 or IPv6
      ruby {
        init => '
          require "ipaddr"
          IPv6Privatecidr = [ "fc00::/7", "fe80::/10", "ff00::/8", "2001:db8::/32", "2001:20::/28", "::1/128", "::/128", "100::/64", "64:ff9b::/96" ]
        '
        code => '
          # Author: Nate Guagenti (@neu5ron)
          # Set field names
          parent_nested_field_name = "[destination]"
          orig_ip_address_nested_field_name = "#{parent_nested_field_name}[ip]"
          is_ipv6_nested_field_name = "#{parent_nested_field_name}[is_ipv6]"
          # Get values
          ip_addresses= event.get("#{orig_ip_address_nested_field_name}")
          ip_addresses_is_ipv6 = event.get("#{is_ipv6_nested_field_name}")
          # Check if IPv6 determination is already made
          if ip_addresses_is_ipv6.nil?
            ip_addresses_is_ipv6 = Array.new
          else
            ip_addresses_is_ipv6 = [ ip_addresses_is_ipv6 ]
          end
          
          ip_addresses_public = Array.new
          ip_addresses_type = Array.new
          ip_addresses_rfc = Array.new
          not_ip_addresses = Array.new
          version_ip_addresses = Array.new
          clean_ip_addresses = Array.new
          
          # Determine if the IP field is an array if not make it an array for continuity
          if ip_addresses.is_a? Enumerable
            ip_addresses = ip_addresses.uniq
          else
            ip_addresses = [ ip_addresses ]
          end
          
          for ip_address in ip_addresses
            #### General Cleanup
            # Remove quoted
            ip_address = ip_address.delete("\'")
            ip_address = ip_address.delete("\"")
            # Remove ending "."
            ip_address = ip_address.chomp
            # Remove preceding "."# Do not ask.. reverse + chomp + reverse up to 16 times faster
            ip_address = ip_address.reverse.chomp(".").reverse
            # Remove ending or beginning whitespace
            ip_address = ip_address.lstrip.rstrip
            # Remove things that would make an IP a share but we want the IP :)
            ip_address = ip_address.gsub(/^\\:?/, "")
            # Downcase/lowercase for checking if possible ipv6
            ip_address = ip_address.downcase
          
            # IPv4
            ip_address_length = ip_address.length
            if !ip_address.include?(":") && !( /[a-z]/ === ip_address ) && ip_address_length <= 15 && ip_address_length >= 7
              # Remove any preceding zeroes in each octet
              temp_ip = Array.new
              ip_address.split(".").each do |octet|
                  octet = octet.to_i.to_s
                  temp_ip.push(octet)
              end
              ip_address = temp_ip.join(".")
          
              begin
                IPAddr.new(ip_address)
                # ip_address = IPAddr.new(ip_address)
                # IP Version 4 (ipv4)
          
                # Private/RFC1918
                if ip_address.start_with?( "10.", "192.168." )
                    ip_public = "false"
                    ip_type = "private"
                    ip_rfc = "RFC_1918"
          
                # (Local)link-local RFC3927
                elsif ip_address.start_with?( "169.254." )
                    ip_public = "false"
                    ip_type = "local"
                    ip_rfc = "RFC_3927"
          
                # Loopback RFC1122-3.2.1.3
                elsif ip_address.start_with?( "127." )
                    ip_public = "false"
                    ip_type = "loopback"
                    ip_rfc = "RFC_1122-3.2.1.3"
          
                # RFC1700
                elsif ip_address.start_with?("0.")
                    ip_public = "false"
                    ip_type = "reserved_as_a_source_address_only"
                    ip_rfc = "RFC_1700"
          
                # IPv6 to IP4 anycast RFC3068
                elsif ip_address.start_with?( "192.88.99." )
                    ip_public = "false"
                    ip_type = "6to4"
                    ip_rfc = "RFC_3068"
          
                # IPv6 to IP4 anycast RFC7535
                elsif ip_address.start_with?( "192.31.196." )
                    ip_public = "false"
                    ip_type = "as112-v4"
                    ip_rfc = "RFC_3068"
          
                # IPv6 to IP4 anycast RFC7450, "Automatic Multicast Tunneling"
                elsif ip_address.start_with?( "192.52.193" )
                    ip_public = "false"
                    ip_type = "amt"
                    ip_rfc = "RFC_7450"
          
                #  Reserved RFC6890, RFC1122-3.2.1.3, RFC2544, RFC5737
                elsif ip_address.start_with?( "0.", "192.0.0.", "192.0.1.", "192.0.2.", "192.18.", "192.19.", "198.51.100.", "203.0.113." )
                    ip_public = "false"
                    ip_type = "reserved"
                    ip_rfc = [ "RFCRFC_19186890", "RFCRFC_19181122-3.2.1.3", "RFCRFC_19182544", "RFCRFC_19185737" ]
          
                # Private/RFC-1918 -- continued -- 172.16.0.0-17.31.255.255
                elsif ip_address.start_with?( "172." )
                    # Check if 2nd octet is in range(between) 16 to 31
                    if ip_address.split(".")[1].to_i.between?(16,31)
                        ip_public = "false"
                        ip_type = "private"
                        ip_rfc = "RFC_1918"
                    else
                      ip_public = "true"
                      ip_type = "public"
                      ip_rfc = "RFC_1366"
                    end
          
                # Private/RFC-1918 -- continued -- 100.64.0.1 - 100.127.255.254
                elsif ip_address.start_with?( "100." )
                    # Check if 2nd octet is in range(between) 64 to 127
                    if ip_address.split(".")[1].to_i.between?(64,127)
                        ip_public = "false"
                        ip_type = "private"
                        ip_rfc = "RFC_1918"
                    else
                      ip_public = "true"
                      ip_type = "public"
                      ip_rfc = "RFC_1366"
                    end
          
                # The remaining possible NON public/routable IPs begin with 2 and are either multicast or broadcast
                elsif ip_address.start_with?( "2" )
                    # Broadcast
                    if ip_address == "255.255.255.255"
                        ip_public = "false"
                        ip_type = "broadcast"
                        ip_rfc = "RFC_8190"
          
                    # Multicast
                    # Check if 1st octet is in range(between) 224 to 255
                    elsif ip_address.split(".")[0].to_i.between?(224,255)
                        ip_public = "false"
                        ip_type = "multicast"
                        ip_rfc = "RFC_1112"
                    else
                      ip_public = "true"
                      ip_type = "public"
                      ip_rfc = "RFC_1366"
                    end
          
                # RFC1366, Public/Routable
                  else
                    ip_public = "true"
                    ip_type = "public"
                    ip_rfc = "RFC_1366"
                end
                # set parameters
                clean_ip_addresses.push(ip_address)
                version_ip_addresses.push("4")
                ip_addresses_is_ipv6.push("false")
                ip_addresses_public.push(ip_public)
                ip_addresses_type.push(ip_type)
                ip_addresses_rfc.push(ip_rfc)
              rescue
                not_ip_addresses.push(ip_address)
              end
          
            # IPv6
            elsif ip_address_length <= 39 && ip_address_length >= 2 && ip_address.ascii_only?
              begin
                ip_address_check = IPAddr.new(ip_address)
                # Public IP Check
                ip_public = "true"
                temp_ip_check = "zDamTyILGeKD4H0.IbPK6g"
                IPv6Privatecidr.each do |i_p|
                  cidr = IPAddr.new(i_p)
                  if cidr.include?(ip_address_check)
                    ip_public = "false"
                  end
                end
                # set parameters
                #TODO:eventually set to real type(rfc description) and real rfc (rfc code)
                if ip_address == "::1"
                  ip_type = "loopback"
                  ip_rfc = "RFC_4291"
                else
                  ip_type = "n/a"
                  ip_rfc = "n/a"
                end
                clean_ip_addresses.push(ip_address)
                version_ip_addresses.push("6")
                ip_addresses_is_ipv6.push("true")
                ip_addresses_public.push(ip_public)
                ip_addresses_type.push(ip_type)
                ip_addresses_rfc.push(ip_rfc)
              rescue
                not_ip_addresses.push(ip_address)
              end
            else
              not_ip_addresses.push(ip_address)
            end
          end
          
          ip_valid_count = clean_ip_addresses.length
          # Set the clean IP(s) and new parameters...
          if !clean_ip_addresses.empty?
            # Use to make array versus non array
            if ip_valid_count == 1
              event.set("#{parent_nested_field_name}[ip_version]", version_ip_addresses[0])
              event.set("#{parent_nested_field_name}[is_ipv6]", ip_addresses_is_ipv6[0])
              event.set("#{parent_nested_field_name}[ip_public]", ip_addresses_public[0])
              event.set("#{parent_nested_field_name}[ip_type]", ip_addresses_type[0])
              event.set("#{parent_nested_field_name}[ip_rfc]", ip_addresses_rfc[0])
              event.remove("#{orig_ip_address_nested_field_name}")
              event.set("#{orig_ip_address_nested_field_name}", clean_ip_addresses[0])
          
            else
              event.set("#{parent_nested_field_name}[ip_version]", version_ip_addresses)
              event.set("#{parent_nested_field_name}[is_ipv6]", ip_addresses_is_ipv6)
              event.set("#{parent_nested_field_name}[ip_public]", ip_addresses_public)
              event.set("#{parent_nested_field_name}[ip_type]", ip_addresses_type)
              event.set("#{parent_nested_field_name}[ip_rfc]", ip_addresses_rfc)
              event.remove("#{orig_ip_address_nested_field_name}")
              event.set("#{orig_ip_address_nested_field_name}", clean_ip_addresses)
            end
          else
            event.remove("#{orig_ip_address_nested_field_name}")
          end
          # Set non clean IP(s)
          if !not_ip_addresses.empty?
            event.tag("Invalid IP(s) #{not_ip_addresses} found in the field #{parent_nested_field_name}")
            #event.set("not_ip_#{parent_nested_field_name}", not_ip_addresses)
          end
          
          # Set the number of ip addresses so we can use array or non array later in pipeline and this script
          event.set("#{parent_nested_field_name}[ip_valid_count]", ip_valid_count)        
        '
        add_field =>  {
          "[@metadata][etl][pipeline]" => "filter-ruby-56531bf4c88a-20220404.01"
        }
        tag_on_exception =>  "_rubyexception-56531bf4c88a-destination-ip_clean_and_public.rb-20220404.01"
        id => "filter-ruby-56531bf4c88a"
      }
      # If still has valid IP(s) after cleanup
      if [destination][ip] {
        # Only perform geo enrichment if is a public IP
        if [destination][ip_public] == "true" {
          geoip {
            source => "[destination][ip]"
            target => "[destination][geo]"
            default_database_type => "City"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            #:default:# cache_size => 1000
            cache_size => 90000
            add_field =>  {
              "[@metadata][destination_ip_geo_location_successful]" => "true"
              "[@metadata][etl][pipeline]" => "filter-geoip-c2c25d701e37-20220321.02"
            }
            #fields => [
            #  "city_name",
            #  "continent_code",
            #  "country_code2",
            #  "country_code3",
            #  "country_name",
            #  "dma_code",
            #  "latitude",
            #  "location",
            #  "longitude",
            #  "postal_code",
            #  "region_name", "timezone"
            #]
            remove_field => [
              "[destination][geo][ip]",
              "[destination][geo][latitude]",
              "[destination][geo][longitude]",
              "[destination][geo][country_code2]",
              "[destination][geo][country_code3]"
            ]
            tag_on_failure => [ "_geoip_lookup_failure", "parsefailure-geoip-city-destination_ip", "_geoip_lookup_failure-c2c25d701e37-20220321.02" ]
            id => "filter-geoip-c2c25d701e37"
          }
          # Make ECS compliant
          if [@metadata][destination_ip_geo_location_successful] {
            mutate {
              rename => {
                "[destination][geo][region_code]" => "[destination][geo][region_iso_code]"
              }
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-mutate-8e679e54306a-20220321.01"
              }
              tag_on_failure => "_mutate_error-8e679e54306a-20220321.01"
              id => "filter-mutate-8e679e54306a"
            }
          }
          geoip {
            source => "[destination][ip]"
            target => "[destination][as]"
            default_database_type => "ASN"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            #:default:# cache_size => 1000
            cache_size => 90000
            add_field =>  {
              "[@metadata][destination_ip_bgp_as_info_successful]" => "true"
              "[@metadata][etl][pipeline]" => "filter-geoip-7d8fcde65e8b-20220310.01"
            }
            remove_field => [ "[destination][as][ip]" ]
            tag_on_failure => [ "_geoip_lookup_failure", "parsefailure-geoip-asn-destination_ip", "_geoip_lookup_failure-7d8fcde65e8b-20220310.01" ]
            id => "filter-geoip-7d8fcde65e8b"
          }
  
          # Make ECS compliant
          if [@metadata][destination_ip_bgp_as_info_successful] {
            mutate {
              rename => {
                "[destination][as][as][number]" => "[destination][as][number]"
                "[destination][as][as][organization][name]" => "[destination][as][organization][name]"
                "[destination][as][as_org]" => "[destination][as][organization][name]"
                "[destination][as][asn]" => "[destination][as][number]"
                "[destination][as][organization_name]" => "[destination][as][organization][name]"
              }
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-mutate-8bd5224c1084-20220531.01"
              }
              tag_on_failure => "_mutate_error-8bd5224c1084-20220531.01"
              id => "filter-mutate-8bd5224c1084"
            }
          }
  
        }
      }
      # Copy destination.ip to destination.address in a sweeping fashion so don't have to one off it every time
      if ![destination][address] {
        mutate {
          copy => {
            "[destination][ip]" => "[destination][address]"
          }
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-mutate-139f9ea9cbaa-20220310.01"
          }
          tag_on_failure => "_mutate_error-139f9ea9cbaa-20220310.01"
          id => "filter-mutate-139f9ea9cbaa"
        }
      }
  
    }
  }
}
