# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [@metadata][z_no_reuse][event_sub_type] == "dns" or [@metadata][z_no_reuse][event_sub_type] == "dns_red" ) {
    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "dns"
        "[event][category]" => "network"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CORELIGHT_INDEX_NAME_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CORELIGHT_INDEX_DATASET_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CORELIGHT_INDEX_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "AA" => "[dns][flags][authoritative]"
        "RA" => "[dns][flags][recursion][available]"
        "RD" => "[dns][flags][recursion][desired]"
        "TC" => "[dns][flags][truncated][response]"
        "TTLs" => "[dns][answers][ttl]"
        "Z" => "[dns][flags][z_bit]"
        "addl" => "[dns][additionals][name]"
        "answers" => "[dns][answers][name]"
        "auth" => "[dns][additionals][authoritative][name]"
        "qclass" => "[dns][op][class_code]"
        "qclass_name" => "[dns][question][class]"
        "qtype" => "[dns][question][type_code]"
        "qtype_name" => "[dns][question][type]"
        "query" => "[dns][question][name]"
        "rcode" => "[dns][status_code]"
        "rcode_name" => "[dns][response_code]"
        "rejected" => "[dns][flags][rejected]"
        "rtt" => "[dns][rtt]"
        "trans_id" => "[dns][id]"
      }
      # convert so can do actually if conditional checks on true/false value itself (versus bool field exists that it bugs to) without unnecessary logstash logic
      convert => {
        "[dns][flags][authoritative]" => "string"
        "[dns][flags][recursion][available]" => "string"
        "[dns][flags][recursion][desired]" => "string"
        "[dns][flags][truncated][response]" => "string"
        "[dns][flags][rejected]" => "string"
        "[dns][flags][z_bit]" => "string"
      }
      replace => {
        "[network][protocol]" => "dns"
      }
      copy => {
        "[dns][question][name]" => "[destination][domain]"
        "[dns][rtt]" => "[event][duration]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-e98caa7068b3-main-dns-20220325.02"
      }
      tag_on_failure => "_mutate_error-e98caa7068b3-20220325.02"
      id => "filter-mutate-e98caa7068b3"
    }

    # DNS Flag AA
    if [dns][flags][authoritative] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "AA"
          "[@metadata][etl][pipeline]" => "filter-mutate-0697a2be3a55-20220325.01"
        }
        tag_on_failure => "_mutate_error-0697a2be3a55-20220325.01"
        id => "filter-mutate-0697a2be3a55"
      }
    }

    # DNS Flag RA
    if [dns][flags][recursion][available] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "RA"
          "[@metadata][etl][pipeline]" => "filter-mutate-9e8d9aaf98ca-20220325.01"
        }
        tag_on_failure => "_mutate_error-9e8d9aaf98ca-20220325.01"
        id => "filter-mutate-9e8d9aaf98ca"
      }
    }

    # DNS Flag RD
    if [dns][flags][recursion][desired] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "RD"
          "[@metadata][etl][pipeline]" => "filter-mutate-64f1b1dcc551-20220325.01"
        }
        tag_on_failure => "_mutate_error-64f1b1dcc551-20220325.01"
        id => "filter-mutate-64f1b1dcc551"
      }
    }

    # DNS Flag TC
    if [dns][flags][truncated][response] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "TC"
          "[@metadata][etl][pipeline]" => "filter-mutate-89f1b2973a90-20220325.01"
        }
        tag_on_failure => "_mutate_error-89f1b2973a90-20220325.01"
        id => "filter-mutate-89f1b2973a90"
      }
    }

    # DNS Flag Z-Bit
    if [dns][flags][z_bit] and [dns][flags][z_bit] != "0" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "Z"
          "[@metadata][etl][pipeline]" => "filter-mutate-4e320200150b-20220325.01"
        }
        tag_on_failure => "_mutate_error-4e320200150b-20220325.01"
        id => "filter-mutate-4e320200150b"
      }
    }

    # Event outcome
    if [dns][flags][rejected] {
      translate {
        field => "[dns][flags][rejected]"
        exact => true
        dictionary => [
          "false", "success",
          "true", "failure"
        ]
        destination => "[event][outcome]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-translate-8a01ef3f6615-20220310.01"
        }
        id => "filter-translate-8a01ef3f6615"
      }
    }
    # Event duration
    ruby {
      code => '
        event_duration = event.get("[event][duration]")
        duration = event_duration.to_f * 1000000000
        event.set("[event][duration]", duration)
      '
      add_field =>  {
        "[@metadata][etl][pipeline]" => "filter-ruby-889157cb56d4-20220310.01"
      }
      tag_on_exception => "_rubyexception-889157cb56d4-event.duration_to_nanoseconds-20220310.01"
      tag_with_exception_message => true
      id => "filter-ruby-889157cb56d4"
    }

  }
}
