filter {
  if [@metadata][stage] == "suricata_json" {
    if [dns] {

      # rename nested answers/authorities otherwise name collisions
      #json {
      #    source => "[dns][answers]"
      #    target => "temp_answers"
      #    remove_field => "answers"
      #  #rename => {
      #  #  "[dns][answers][rrname]" => "[dns][question][name]"
      #  #  "[dns][answers][rrtype]" => "[dns][question][type]"
      #  #  "[dns][answers][rdata]" => "[dns][answers][name]"
      #  #}
      #}
      #ruby {
      #  code => "event.get('temp_answers').each { |kv| event.set(kv['rrname'], kv['rrtype'], kv['rdata']) }"
      #}
      # rename nested answers/authorities otherwise name collisions
      mutate {
        rename => {
          "[dns][answers]" => "[suricata][dns][answers]"
          "[dns][authorities]" => "[suricata][dns][authorities]"
        }
      }

      mutate {
        rename => {
          "[dns][rcode]" => "[dns][response_code]"
          "[dns][rrname]" => "[dns][question][name]"
          "[dns][rrtype]" => "[dns][question][type]"
          "[dns][rdata]" => "[dns][answers][name]"
        }
        copy => { "[dns][question][name]" => "[@metadata][destination_domain]" }
      }

      # responding dns server is authoritative for this answer/response
      if [dns][aa] == 'true' {
        mutate { add_field => { "[dns][header_flags]" => "AA" } }
      }

      # responding dns server supports recursion. A DNS flag specifying whether recursive query support is available in the name server.
      if [dns][ra] == 'true' {
        mutate { add_field => { "[dns][header_flags]" => "RA" } }
      }

      # recursion was requested by the client
      if [dns][rd] == 'true' {
        mutate { add_field => { "[dns][header_flags]" => "RD" } }
      }

      # responding answer/response was truncated
      if [dns][tc] == 'true' {
        mutate { add_field => { "[dns][header_flags]" => "TC" } }
      }

    }
  }
}
