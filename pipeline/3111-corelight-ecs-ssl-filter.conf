# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [@metadata][z_no_reuse][event_sub_type] == "ssl" or [@metadata][z_no_reuse][event_sub_type] == "ssl_red" ) {
    mutate {
      update => {
        "[@metadata][temporary_metadata_index_name_suffix]" => "ssl"
        "[event][category]" => "network"
      }
      rename => {
        "cert_chain_fps" => "[tls][server][cert_chain_fingerprints]"
        "cipher" => "[tls][cipher]"
        "client_issuer" => "[tls][client][issuer]"
        "client_cert_chain_fps" => "[tls][client][cert_chain_fingerprints]"
        "client_subject" => "[tls][client][subject]"
        "curve" => "[tls][curve]"
        "established" => "[tls][established]"
        "issuer" => "[tls][server][issuer]"
        "ja3" => "[tls][client][ja3]"
        "ja3s" => "[tls][server][ja3s]"
        "last_alert" => "[ssl][last_alert]"
        "next_protocol" => "[tls][next_protocol]"
        "notary" => "[ssl][notary]"
        "ocsp_status" => "[ssl][ocsp_status]"
        "orig_certificate_sha1" => "[tls][client][hash][sha1]"
        "resp_certificate_sha1" => "[tls][server][hash][sha1]"
        "resumed" => "[tls][resumed]"
        "server_name" => "[tls][client][server_name]"
        "ssl_history" => "[ssl][connection_history]"
        "subject" => "[tls][server][subject]"
        "valid_ct_logs" => "[ssl][valid_ct_logs]"
        "valid_ct_operators" => "[ssl][valid_ct_operators]"
        "valid_ct_operators_list" => "[ssl][valid_ct_operators_list]"
        "validation_status" => "[ssl][validation_status]"
        "version" => "[tls][version]"
        "version_num" => "[tls][version_number]"
      }
      copy =>  {
        "[tls][client][server_name]" => "[destination][domain]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-c14aec1f95f9-main-ssl-20220330.01"
      }
      tag_on_failure => "_mutate_error-c14aec1f95f9-20220330.01"
      id => "filter-mutate-c14aec1f95f9"
    }

    # Event outcome
    if [tls][established] {
      translate {
        field => "[tls][established]"
        exact => true
        dictionary => [
          "true", "success",
          "false", "failure"
        ]
        destination => "[event][outcome]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-translate-eb95f3fadf67-20220310.01"
        }
        id => "filter-translate-eb95f3fadf67"
      }
    }
    # SSL Connection History
    # reference: https://github.com/zeek/zeek/blob/aa8f11fa17f411a50410cf5743d1a66e6809b70c/scripts/base/protocols/ssl/main.zeek#L72
    # reference: ""add_to_history"" function in https://github.com/zeek/zeek/blob/master/scripts/base/protocols/ssl/main.zeek
    # reference: https://docs.zeek.org/en/master/scripts/base/bif/plugins/Zeek_SSL.events.bif.zeek.html
    if [ssl][connection_history] {
      ruby {
        code => '
          hist = event.get("[ssl][connection_history]")
          hist_dict = {
            "a"=> "supplemental_data",
            "b"=> "heartbeat", # Generated for SSL/TLS heartbeat messages that are sent before session encryption starts. Generally heartbeat messages should rarely be seen in normal TLS traffic. Heartbeats are described in RFC 6520
            "c"=> "client_hello",
            "d"=> "application_data",
            "e"=> "end_of_early_data",
            "f"=> "finished",
            "g"=> "client_key_exchange",
            "h"=> "hello_request",
            "i"=> "change_cipher_spec", # This event is raised when a SSL/TLS ChangeCipherSpec message is encountered before encryption begins
            "j"=> "hello_retry_request",
            "k"=> "server_key_exchange",
            "l"=> "alert", # Generated for SSL/TLS alert records. SSL/TLS sessions start with an unencrypted handshake, and Zeek extracts as much information out of that as it can. If during that handshake, an endpoint encounters a fatal error, it sends an alert record, that in turn triggers this event. After an alert, any endpoint may close the connection immediately.
            "m"=> "message_hash",
            "n"=> "server_hello_done",
            "o"=> "encrypted_extensions",
            "p"=> "key_update",
            "q"=> "unknown_content_type",
            "r"=> "certificate_request",
            "s"=> "server_hello",
            "t"=> "NewSessionTicket",
            "u"=> "certificate_status",
            "v"=> "hello_verify_request",
            "w"=> "certificate_url",
            "x"=> "certificate",
            "y"=> "certificate_verify",
            "z"=> "unassigned_handshake_type"
          }
          hist = hist.split("")
          hist_client = ""
          hist_server = ""
          hist_client_detailed_list = Array.new
          hist_server_detailed_list = Array.new
          hist_detailed_list = Array.new
          for hist_value in hist
            next if hist_value.nil? # Skip if hist_value is nil
            if hist_value == hist_value.upcase
              dict_hist_full = hist_dict[hist_value.downcase]&.capitalize
              unless dict_hist_full.nil?
                hist_client << hist_value
                hist_client_detailed_list.push(dict_hist_full)
                hist_detailed_list.push(dict_hist_full)
              end
            else
              dict_hist_full = hist_dict[hist_value]
              unless dict_hist_full.nil?
                hist_server << hist_value
                hist_server_detailed_list.push(dict_hist_full)
                hist_detailed_list.push(dict_hist_full)
              end
            end
          end
          if !hist_client.empty?
            event.set("[tls][client][connection_history]", hist_client )
            event.set("[tls][client][connection_history_detailed]", hist_client_detailed_list )
          end
          if !hist_server.empty?
            event.set("[tls][server][connection_history]", hist_server )
            event.set("[tls][server][connection_history_detailed]", hist_server_detailed_list )
          end
          event.set("[ssl][connection_history_detailed]", hist_detailed_list )
        '
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-867516397105-20230905.01"
        }
        tag_on_exception => "_rubyexception-867516397105-ssl_connection_history-20230905.01"
        tag_with_exception_message => true
        id => "filter-ruby-867516397105"
      }
    }
        
  }
}
