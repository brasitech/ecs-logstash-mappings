# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [destination][domain] {
    ruby {
      code => '
        # Get the domain from the event
        domain = event.get("[destination][domain]")
        if !domain.is_a? Enumerable
          if !domain.nil? && !domain.empty?
            # Perform enrichment/hunt/determination before cleanup
            domain_has_whitespace = domain.match?(/\s/)
            domain_has_non_ascii = !domain.ascii_only?
            domain_has_colon = domain.include?(":")
            # Regex ends with digit is still faster than performing "Integer(domain[-1]) rescue false" or similar
            domain_ends_with_integer = /[0-9]$/ === domain
            # Set things that we always want to add even if it is not a domain. Otherwise certain things like boolean wont make sense when applying filter. otherwise you would have to do _exists_ and then true/false
            domain_is_idn = false
            domain_is_all_upper = domain === domain.upcase
            # Perform general cleanup of the domain name
            domain = domain.downcase
            domain = domain.lstrip.rstrip
            domain = domain.chomp(".")
            domain_has_dot = domain.include?(".")
            # Get the total length without "."
            domain_total_length = domain.gsub(".", "").length
      
            # If domain has no "." then do not perform enrichment
            if domain_has_dot
              # Dont ask.. reverse + chomp + reverse up to 16 times faster
              domain = domain.reverse.chomp(".").reverse
              # Split domain for processing each level
              domain_split = domain.split(".")
              # Get the total levels
              domain_total_levels = domain_split.length
              # Begin to set each level specific info
              # If it has a dot then there is a minimum of two levels so set the info for first and second level. Since only using length once for each level do not set as a variable
              # Level 1
              domain_lev1_name = domain_split[-1]
              domain_nest = { :"level_1" => { :"name" => domain_lev1_name, :"length" => domain_lev1_name.length } }

              # Do not perform enrichment if domain is only 1 level && not (.arpa) aka IPv4 PTR or IPv6 PTRs
              if domain_total_levels > 1 && domain_lev1_name != "arpa"
                ## Get and set totals of types of characters. Later on is code to perform on each domain, currently disabled
                # Count the consonants
                domain_total_consonants = domain.count "bcdfghjklmnpqrstvxzw"
                # Count the digits
                domain_total_digits = domain.count "0123456789"
                # Count the hex
                domain_total_hex = domain.count "0123456789abcdef"
                # Count punctuation
                domain_total_punctuation = domain.count "-_"
                # Count the vowels
                domain_total_vowels = domain.count "aeiouy"
                # Total letters
                domain_total_letters = domain_total_consonants + domain_total_vowels
                # Total alphanumeric
                domain_total_alphanumeric = domain_total_letters + domain_total_digits
                # Total of invalid domain characters (ie: non RFC conforming characters)
                domain_total_invalid_characters = domain_total_length - domain_total_alphanumeric - domain_total_punctuation
                # Set totals
                event.set("[destination][domain_total_alphanumeric]", domain_total_alphanumeric)
                event.set("[destination][domain_total_consonants]", domain_total_consonants)
                event.set("[destination][domain_total_digits]", domain_total_digits)
                event.set("[destination][domain_total_hex]", domain_total_hex)
                event.set("[destination][domain_total_invalid_characters]", domain_total_invalid_characters)
                event.set("[destination][domain_total_letters]", domain_total_letters)
                event.set("[destination][domain_total_punctuation]", domain_total_punctuation)
                event.set("[destination][domain_total_vowels]", domain_total_vowels)
    
                # Also, do not perform on domains ending in an integer because as of 2022-02-11 10:02:00 UTC there are no domains that end in an integer currently
                if !domain_ends_with_integer
                  # Level 2
                  domain_lev2_name = domain_split[-2]
                  domain_lev2_ends_with_integer = /[0-9]$/ === domain_lev2_name
                  domain_nest.merge! :"level_2" => { :"ends_with_integer" => domain_lev2_ends_with_integer, :"name" => domain_lev2_name, :"length" => domain_lev2_name.length }
    
                  # Level 1+2 Name
                  domain_1n2_name = domain_lev2_name + "." + domain_lev1_name
                  domain_nest.merge! :"1n2_name" => domain_1n2_name
    
                  # Set IDN (Internationalized Domain Name)
                  if domain.include?("xn--")
                    domain_is_idn = true
                  end
    
                  if domain_total_levels >= 3
                    # Level 3
                    domain_lev3_name = domain_split[-3]
                    domain_1n2n3_name =  domain_lev3_name + "." + domain_1n2_name
                    domain_nest.merge! :"level_3" => { :"name" => domain_lev3_name, :"length" => domain_lev3_name.length }
                    domain_nest.merge! :"1n2n3_name" => domain_1n2n3_name
                    # set subdomain (ie: anything up until level 1 and 2)
                    subdomain = domain_split[0..-3].join(".")
                    event.set("[destination][subdomain]", subdomain)
                    event.set("[destination][subdomain_length]", subdomain.gsub(".", "").length)
    
                    if domain_total_levels - 3 >= 2
                      # Level 4
                      domain_lev4_name = domain_split[-4]
                      domain_nest.merge! :"level_4" => { :"name" => domain_lev4_name, :"length" => domain_lev4_name.length }
                      # Level 5
                      domain_lev5_name = domain_split[-5]
                      domain_nest.merge! :"level_5" => { :"name" => domain_lev5_name, :"length" => domain_lev5_name.length }
                    elsif domain_total_levels - 3 == 1
                      # Level 4
                      domain_lev4_name = domain_split[-4]
                      domain_nest.merge! :"level_4" => { :"name" => domain_lev4_name, :"length" => domain_lev4_name.length }
                    end
                  end
                  event.set("[temporary_domain_nest]", domain_nest)
    
                  # Begin to set each level specific info
                  # Create/Setup hash/dictionary variable for breaking down information for each level
                  #each_domain_level_info = Hash.new
                  #number = 0
                  #for level in domain_split.reverse
                    #number += 1
                    #lev = number.to_s
                    #lev = "lev_" + lev
                    #each_domain_level_info[lev] = {}
                    #each_domain_level_info[lev].store("name", level)
                    #level_length = level.length
                    #each_domain_level_info[lev].store("length", level_length)
    
                    ## Count of
                    ##level_consonants = level.count "bcdfghjklmnpqrstvxzw"
                    ##level_digits = level.count "0123456789"
                    ##level_hex = level.count "0123456789abcdef"
                    ##level_punctuation = level.count "-_"
                    ##level_vowels = level.count "aeiouy"
                    ### Totals
                    ##level_letters = level_consonants + level_vowels
                    ##level_alphanumeric = level_letters + level_digits
                    ##level_invalid_characters = level_length - level_alphanumeric - level_punctuation
                    
                    ##each_domain_level_info[lev].store("alphanumeric", level_alphanumeric)
                    ##each_domain_level_info[lev].store("consonants", level_consonants)
                    ##each_domain_level_info[lev].store("digits", level_digits)
                    ##each_domain_level_info[lev].store("hex", level_hex)
                    ##each_domain_level_info[lev].store("invalid_characters", level_invalid_characters)
                    ##each_domain_level_info[lev].store("letters", level_letters)
                    ##each_domain_level_info[lev].store("punctuation", level_punctuation)
                    ##each_domain_level_info[lev].store("vowels", level_vowels)
    
                    #TONOTE:Stopping at 5 to make pipeline faster
                    #if number == 5
                      #break
                    #end
                  #end
                  #event.set("[destination][domain]", each_domain_level_info)
                else
                  event.set("[temporary_domain_nest]", domain_nest)
                end
    
              else
                event.set("[temporary_domain_nest]", domain_nest)
              end
            else
              # Preset total levels to 1, in case no dot or other invalid
              domain_total_levels = 1
            end
    
            # Things to set regardless of other enrichment
            #event.set("[destination][domain_name]", domain) #[destination][domain]
            event.set("[destination][domain_ends_with_integer]", domain_ends_with_integer)
            event.set("[destination][domain_has_colon]", domain_has_colon)
            event.set("[destination][domain_has_dot]", domain_has_dot)
            event.set("[destination][domain_has_non_ascii]", domain_has_non_ascii)
            event.set("[destination][domain_has_whitespace]", domain_has_whitespace)
            event.set("[destination][domain_is_all_upper]", domain_is_all_upper)
            event.set("[destination][domain_is_idn]", domain_is_idn)
            event.set("[destination][domain_length]", domain_total_length)
            event.set("[destination][domain_total_levels]", domain_total_levels)
          end
        end
      '
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-ruby-230b34314c60-2023120101"
      }
      tag_on_exception => "_rubyexception-230b34314c60-destination.domain-enrichment-2023120101"
      tag_with_exception_message => true
      id => "filter-ruby-230b34314c60"
    }

    mutate {
      rename => {
        "[temporary_domain_nest][level_1][ends_with_integer]" => "[destination][top_level_domain_ends_with_integer]"
        "[temporary_domain_nest][level_1][name]" => "[destination][top_level_domain]"
        "[temporary_domain_nest][level_1][length]" => "[destination][top_level_domain_length]"
        "[temporary_domain_nest][level_2][ends_with_integer]" => "[destination][parent_domain_ends_with_integer]"
        "[temporary_domain_nest][level_2][length]" => "[destination][parent_domain_length]"
        "[temporary_domain_nest][level_2][name]" => "[destination][parent_domain]"
        "[temporary_domain_nest][level_3][length]" => "[destination][level_3_domain_length]"
        "[temporary_domain_nest][level_3][name]" => "[destination][level_3_domain]"
        "[temporary_domain_nest][level_4][length]" => "[destination][level_4_domain_length]"
        "[temporary_domain_nest][level_4][name]" => "[destination][level_4_domain]"
        "[temporary_domain_nest][level_5][length]" => "[destination][level_5_domain_length]"
        "[temporary_domain_nest][level_5][name]" => "[destination][level_5_domain]"
        "[temporary_domain_nest][1n2_name]" => "[destination][registered_domain]"
        "[temporary_domain_nest][1n2n3_name]" => "[destination][level_1n2n3_domain]"
      }
      remove_field => [ "[temporary_domain_nest]" ]
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-28d0dc42327c-2023120101"
      }
      tag_on_failure => "_mutate_error-28d0dc42327c"
      id => "filter-mutate-28d0dc42327c"
    }

  }
}
